name: ARC PostgreSQL Service Example
run-name: ARC PostgreSQL Service Example-${{ inputs.WorkflowFileID }}


on:
  workflow_dispatch:
    inputs:
      RunnerLabel:
        description: "Target ARC name used for runs-on in job"
        required: true
        default: "self-hosted"
      WorkflowFileID:
        description: "WorkflowID"
        required: false
        default: ""


jobs:
  # Label of the runner jobb
  runner-job:
    # You must use a Linux environment when using service containers or container job
    runs-on: ${{ inputs.RunnerLabel }}

    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
#           --restart always
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - run: |
          docker ps
      - run: echo "### hello world" >> $GITHUB_STEP_SUMMARY
      - name: Harden Runner
        uses: step-security/harden-runner@rc
        with:
          egress-policy: audit
#         allowed-endpoints: >
#           postgres:5432 # PostgreSQL service container
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data
        run: node client.js
        # Environment variables used by the `client.js` script to create
        # a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          
      - name: Compress tcpdump
        if: always()
        continue-on-error: true
        run: |
          gzip ${{ runner.temp }}/dump-${{ runner.name }}.pcap
          
      - name: Upload tcpdump
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dump-${{ runner.name }}
          path: ${{ runner.temp }}/dump-${{ runner.name }}.pcap.gz
          compression-level: 0
          retention-days: 1
          if-no-files-found: ignore
